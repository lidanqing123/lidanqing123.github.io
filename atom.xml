<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lidanqing Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-30T01:58:26.975Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lidanqing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anaconda,  Conda和 Bioconda相关</title>
    <link href="http://yoursite.com/2019/01/30/Anaconda-Conda%E5%92%8C-Bioconda%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/01/30/Anaconda-Conda和-Bioconda相关/</id>
    <published>2019-01-29T16:12:00.000Z</published>
    <updated>2019-01-30T01:58:26.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Anaconda是一个用于科学计算的<strong>Python发行版</strong>，支持 Linux, Mac, Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。Anaconda利用工具/命令conda来进行package和environment的管理，并且已经包含了Python和相关的配套工具。</p><p>这里先解释下conda、anaconda这些概念的差别。</p><p>conda可以理解为一个工具，也是一个可执行命令，其<strong>核心功能是包管理与环境管理</strong>。包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。</p><p>Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，所以也称为Python的一种发行版。其实还有Miniconda，顾名思义，它只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。</p><p><strong>conda将几乎所有的工具、第三方包都当做package对待，甚至包括python和conda自身！</strong></p><h1 id="Anaconda-Miniconda-安装"><a href="#Anaconda-Miniconda-安装" class="headerlink" title="Anaconda(Miniconda)安装"></a>Anaconda(Miniconda)安装</h1><p>以miniconda安装为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取安装文件</span><br><span class="line">cd ~/</span><br><span class="line">wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh</span><br><span class="line"></span><br><span class="line"># 安装miniconda，根据提示完成安装</span><br><span class="line">cd ~/</span><br><span class="line">bash Miniconda2-latest-MacOSX-x86_64.sh</span><br><span class="line"></span><br><span class="line"># 需新建Terminal Session或手动加载环境变量来使得conda生效</span><br><span class="line"># 手动加载</span><br><span class="line">source ~/.bash_profie</span><br></pre></td></tr></table></figure><h1 id="设置国内镜像源"><a href="#设置国内镜像源" class="headerlink" title="设置国内镜像源"></a>设置国内镜像源</h1><p>添加清华的一系列镜像，加速下载，提高成功率。默认仓库不仅速度极慢，而且经常中断，国内镜像下载速度可达国外几百倍。</p><p>TUNA 提供了 Anaconda 仓库的镜像，运行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></p><h2 id="Conda-三方源"><a href="#Conda-三方源" class="headerlink" title="Conda 三方源"></a>Conda 三方源</h2><p>   当前tuna还维护了一些anaconda三方源。</p><p>   bioconda</p><p>   添加bioconda频道，方便生物软件安装。</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br></pre></td></tr></table></figure><h1 id="conda使用"><a href="#conda使用" class="headerlink" title="conda使用"></a>conda使用</h1><p>这里介绍conda常用的命令操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查看conda版本</span><br><span class="line">$ conda --version</span><br><span class="line">conda 4.3.30</span><br><span class="line"></span><br><span class="line"># 查看对应的python默认版本（默认环境的名字是root，注意这个root不是超级管理员的意思）</span><br><span class="line">$ python --version</span><br><span class="line">Python 3.6.3 :: Anaconda, Inc.</span><br></pre></td></tr></table></figure></p><h2 id="conda的环境管理"><a href="#conda的环境管理" class="headerlink" title="conda的环境管理"></a>conda的环境管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个名为env_test的环境，指定Python版本是2.7（conda会自动寻找2.7.x中的最新版本）</span><br><span class="line">$ conda create --name env_test python=2.7</span><br><span class="line"></span><br><span class="line"># 查看已安装的环境，当前被激活的环境会显示有一个星号</span><br><span class="line">$ conda info -e</span><br><span class="line"># conda environments:</span><br><span class="line">#</span><br><span class="line">env_test /home/xxxx/.conda/envs/env_test</span><br><span class="line">root * /opt/anaconda3</span><br><span class="line"></span><br><span class="line"># 安装好后，使用source activate激活指定环境</span><br><span class="line">$ source activate env_test</span><br><span class="line"></span><br><span class="line"># 再次查看当前python版本，可以看到系统已经切换到了2.7的环境</span><br><span class="line">$ python --version</span><br><span class="line">Python 2.7.14 :: Anaconda, Inc.</span><br><span class="line"></span><br><span class="line"># 退出当前虚拟环境，返回默认python环境</span><br><span class="line">$ source deactivate</span><br><span class="line"></span><br><span class="line"># 删除一个已有的环境</span><br><span class="line">$ conda remove --name env_test --all</span><br></pre></td></tr></table></figure><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前环境下已安装packages</span><br><span class="line">$ conda list</span><br><span class="line"></span><br><span class="line"># 查找package信息</span><br><span class="line">$ conda search numpy</span><br><span class="line"></span><br><span class="line"># 安装package</span><br><span class="line">$ conda install numpy</span><br><span class="line"></span><br><span class="line"># 安装指定版本package</span><br><span class="line">$ conda install numpy=1.13.3</span><br><span class="line"></span><br><span class="line"># 更新package</span><br><span class="line">$ conda update numpy</span><br><span class="line"></span><br><span class="line"># 删除package</span><br><span class="line">$ conda remove numpy</span><br><span class="line"></span><br><span class="line">另外，</span><br><span class="line">$ conda install Keras # 安装keras, 会顺带装上tensorflow, h5py, hdf5等</span><br><span class="line">$ conda install pillow # 安装PIL</span><br><span class="line">$ conda install opencv # 安装cv2</span><br></pre></td></tr></table></figure><h2 id="环境移植"><a href="#环境移植" class="headerlink" title="环境移植"></a>环境移植</h2><p>值得一提的是自己建立的软件环境可以很方便移植到另外一台电脑!</p><p>首先通过<code>source activate target_env</code>要分享的环境<code>target_env</code>，然后输入下面的命令会在当前工作目录下生成一个<code>environment.yml</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env export &gt; environment.yml</span><br></pre></td></tr></table></figure><p>小伙伴拿到<code>environment.yml</code>文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="https://www.anaconda.com/" target="_blank" rel="noopener">Anaconda 官网</a></p><p><a href="http://bioconda.github.io/" target="_blank" rel="noopener">bioconda 官网</a></p><p><a href="https://www.jianshu.com/p/2f3be7781451" target="_blank" rel="noopener">Anaconda安装使用</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">Anaconda 镜像使用帮助</a>| 清华大学开源镜像站</p><p><a href="https://blog.csdn.net/woodcorpse/article/details/82226929" target="_blank" rel="noopener">Nature Method：Bioconda解决生物软件安装的烦恼</a></p><p><a href="https://www.jianshu.com/p/8534e4a5514f" target="_blank" rel="noopener">conda与bioconda解决生信软件安装困扰</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Anaconda是一个用于科学计算的&lt;strong&gt;Python发行版&lt;/strong&gt;，支持 Linux, Mac, Windows系统，
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Anaconda" scheme="http://yoursite.com/tags/Anaconda/"/>
    
      <category term="conda" scheme="http://yoursite.com/tags/conda/"/>
    
      <category term="Miniconda" scheme="http://yoursite.com/tags/Miniconda/"/>
    
      <category term="Bioconda" scheme="http://yoursite.com/tags/Bioconda/"/>
    
  </entry>
  
  <entry>
    <title>Celery 学习资源</title>
    <link href="http://yoursite.com/2019/01/29/Celery-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2019/01/29/Celery-学习资源/</id>
    <published>2019-01-29T03:28:00.000Z</published>
    <updated>2019-01-29T06:52:08.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在程序运行过程中，要执行一个很久的任务，但是我们又不想主程序被阻塞，常见的方法是多线程。可是当并发量过大时，多线程也会扛不住，必须要用线程池来限制并发个数，而且多线程对共享资源的使用也是很麻烦的事情。还有就是协程，但是协程毕竟还是在同一线程内执行的，如果一个任务本身就要执行很长时间，而不是因为等待IO被挂起，那其他协程照样无法得到运行。</p><p>本文要介绍一个强大的分布式任务队列Celery，它可以让任务的执行同主程序完全脱离，甚至不在同一台主机内。它通过队列来调度任务，不用担心并发量高时系统负载过大。它可以用来处理复杂系统性能问题，却又相当灵活易用。下面我们就来了解下Celery。</p><h1 id="Celery-是什么？"><a href="#Celery-是什么？" class="headerlink" title="Celery 是什么？"></a>Celery 是什么？</h1><p>Celery（中文是芹菜的意思）是Python语言实现的分布式队列服务，除了支持即时任务，还支持定时任务，Celery 有5个核心角色。<br><img src="https://user-gold-cdn.xitu.io/2018/10/10/1665e8ee8b12546a?imageView2/0/w/1280/h/960/ignore-error/1" alt=""></p><p>记住这5个角色后面理解Celery就轻松了。</p><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>任务(Task)就是你要做的事情，例如一个注册流程里面有很多任务，给用户发验证邮件就是一个任务，这种耗时的任务就可以交给Celery去处理，还有一种任务是定时任务，比如每天定时统计网站的注册人数，这个也可以交给Celery周期性的处理。</p><h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><p>Broker 的中文意思是经纪人，指为市场上买卖双方提供中介服务的人。在Celery中这个角色相当于数据结构中的队列，介于生产者和消费者之间经纪人。例如一个Web系统中，生产者是主程序，它生产任务，将任务发送给 Broker，消费者是 Worker，是专门用于执行任务的后台服务。Celery本身不提供队列服务，一般用Redis或者RabbitMQ来实现队列服务。</p><h2 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h2><p>Worker 就是那个一直在后台执行任务的人，也成为任务的消费者，它会实时地监控队列中有没有任务，如果有就立即取出来执行。</p><h2 id="Beat"><a href="#Beat" class="headerlink" title="Beat"></a>Beat</h2><p>Beat 是一个定时任务调度器，它会根据配置定时将任务发送给 Broker，等待 Worker 来消费。</p><h2 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h2><p>Backend 用于保存任务的执行结果，每个任务都有返回值，比如发送邮件的服务会告诉我们有没有发送成功，这个结果就是存在Backend中，当然我们并不总是要关心任务的执行结果。</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="http://www.celeryproject.org" target="_blank" rel="noopener">Celery 官网</a></p><p><a href="http://docs.celeryproject.org/en/latest/index.html" target="_blank" rel="noopener">Celery 官方文档英文版</a></p><p><a href="http://docs.jinkan.org/docs/celery/index.html" target="_blank" rel="noopener">Celery 官方文档中文版</a></p><p><a href="http://python.jobbole.com/tag/celery/" target="_blank" rel="noopener">伯乐在线 celery文章</a></p><p><a href="https://www.cnblogs.com/forward-wang/p/5970806.html" target="_blank" rel="noopener">Celery 框架学习笔记</a></p><p><a href="https://www.cnblogs.com/jonathan1314/p/7649249.html" target="_blank" rel="noopener">Celery分布式任务队列快速入门</a></p><p><a href="https://blog.csdn.net/freeking101/article/details/74707619" target="_blank" rel="noopener">Python 并行分布式框架 Celery</a></p><p><a href="https://www.cnblogs.com/cwp-bg/p/8759638.html" target="_blank" rel="noopener">python之celery使用详解一</a></p><p><a href="https://juejin.im/post/5bbe18255188255c81391385" target="_blank" rel="noopener">高性能异步框架Celery入坑指南</a></p><p><a href="https://cloud.tencent.com/developer/article/1343719" target="_blank" rel="noopener">在Python中用Celery安排管理后台工作流</a></p><p><a href="https://www.213.name/archives/1105" target="_blank" rel="noopener">笔记：集群部署celery分布式任务队列</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h1&gt;&lt;p&gt;在程序运行过程中，要执行一个很久的任务，但是我们又不想主程序被阻塞，常见的方法是多线程。可是当并发量过大时，多线程也会扛不住
      
    
    </summary>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>docker  or not ?</title>
    <link href="http://yoursite.com/2019/01/29/docker-or-not/"/>
    <id>http://yoursite.com/2019/01/29/docker-or-not/</id>
    <published>2019-01-29T02:29:00.000Z</published>
    <updated>2019-01-29T02:36:00.984Z</updated>
    
    <content type="html"><![CDATA[<p>在生物信息分析方面docker可以做哪些应用?在那些方面可以给我们提供便利?是否有必要转向docker?</p><p>liheng大神的<a href="http://lh3.github.io/2015/04/25/a-few-hours-with-docker" target="_blank" rel="noopener">一段话</a>引发了我的思考</p><blockquote><p>Docker is a bless to complex systems such as the old Apache+MySQL+PHP combo, but is a curse to simple command line tools. For simple tools, it adds multiple complications (security, kernel version, Dockerfile, large package, inter-process communication, etc) with little benefit.</p></blockquote><blockquote><p>Bioinformatics tools are not rocket science. They are supposed to be simple. If they are not simple, we should encourage better practices rather than live with the problems and resort to docker. I am particularly against dockerizing easy-to-compile tools such as velvet and bwa or well packaged tools such as spades. Another large fraction of tools in C/C++ can be compiled to statically linked binaries or shipped with necessary dynamic libraries (see salifish). While not ideal, these are still better solutions than docker. Docker will be needed for some tools with complex dependencies, but I predict most of such tools will be abandoned by users unless they are substantially better than other competitors, which rarely happens in practice.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在生物信息分析方面docker可以做哪些应用?在那些方面可以给我们提供便利?是否有必要转向docker?&lt;/p&gt;
&lt;p&gt;liheng大神的&lt;a href=&quot;http://lh3.github.io/2015/04/25/a-few-hours-with-docker&quot; ta
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>常用网站收集</title>
    <link href="http://yoursite.com/2019/01/28/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2019/01/28/常用网站收集/</id>
    <published>2019-01-28T08:29:00.000Z</published>
    <updated>2019-01-29T02:38:35.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程脚本语言"><a href="#流程脚本语言" class="headerlink" title="流程脚本语言"></a>流程脚本语言</h1><h2 id="nextflow"><a href="#nextflow" class="headerlink" title="nextflow"></a>nextflow</h2><ul><li><a href="https://github.com/nextflow-io/nextflow" target="_blank" rel="noopener">github网址</a></li><li><a href="http://blog.sina.com.cn/s/blog_b270dd290102w03r.html" target="_blank" rel="noopener">强大的生物信息流程定制工具nextflow</a></li><li><a href="https://www.jianshu.com/p/8fe8b279b4ff" target="_blank" rel="noopener">初识Nextflow (系列之一)</a></li><li><a href="https://www.jianshu.com/p/e192c4b94387" target="_blank" rel="noopener">Nextflow的基本认知(系列之二)</a></li><li><a href="https://www.jianshu.com/p/9d69d662b7e2" target="_blank" rel="noopener">NextFlow的步骤Process(系列之三)</a></li><li><a href="https://www.jianshu.com/p/0de8417fe018" target="_blank" rel="noopener">Nextflow实践中遇到的问题(系列之四)</a></li><li><a href="https://docs.dockstore.org/docs/prereqs/getting-started-with-nextflow/" target="_blank" rel="noopener">Getting Started with Nextflow</a></li></ul><h2 id="Snakemake"><a href="#Snakemake" class="headerlink" title="Snakemake"></a>Snakemake</h2><ul><li><a href="https://snakemake.readthedocs.io/en/stable/tutorial/tutorial.html" target="_blank" rel="noopener">Snakemake Tutorial</a></li><li><a href="https://www.jianshu.com/p/14b9eccc0c0e" target="_blank" rel="noopener">snakemake使用笔记</a></li></ul><h2 id="CWL"><a href="#CWL" class="headerlink" title="CWL"></a>CWL</h2><ul><li><a href="https://www.commonwl.org/" target="_blank" rel="noopener">Common Workflow Language</a></li><li><a href="https://docs.dockstore.org/docs/prereqs/getting-started-with-cwl/" target="_blank" rel="noopener">Getting Started with CWL</a></li></ul><h2 id="WDL"><a href="#WDL" class="headerlink" title="WDL"></a>WDL</h2><ul><li><a href="https://software.broadinstitute.org/wdl/documentation/" target="_blank" rel="noopener">User Guide</a></li><li><a href="https://docs.dockstore.org/docs/prereqs/getting-started-with-wdl/" target="_blank" rel="noopener">Getting Started with WDL</a></li><li><a href="https://wenlongshen.github.io/2018/09/15/Pipelining-Solution-2/" target="_blank" rel="noopener">WDL入门 </a></li><li><a href="https://blog.csdn.net/theomarker/article/details/79651223?utm_source=blogxgwz5" target="_blank" rel="noopener">WDL学习</a></li><li><a href="https://www.jianshu.com/p/41f377e20ff7" target="_blank" rel="noopener">GATK官方推荐的workflow语言-WDL</a></li></ul><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul><li><a href="https://www.biostars.org/p/258436/" target="_blank" rel="noopener">Snakemake vs. Nextflow: strengths and weaknesses</a></li><li><a href="https://www.biostars.org/p/345998/" target="_blank" rel="noopener">workflow management system : WDL, CWL, Ruffus, SnakeMake, etc </a></li></ul><h2 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h2><ul><li><a href="https://www.colabug.com/297465.html" target="_blank" rel="noopener">华大基因举办第二届基因组云计算技术开发者大会</a></li></ul><h2 id="Dockstore"><a href="#Dockstore" class="headerlink" title="Dockstore"></a><a href="https://dockstore.org/" target="_blank" rel="noopener">Dockstore</a></h2><p>Dockstore, developed by the Cancer Genome Collaboratory, is an open platform used by the GA4GH for sharing Docker-based tools described with the Common Workflow Language (CWL), the Workflow Description Language (WDL), or Nextflow (NFL)</p><ul><li><p><a href="https://docs.dockstore.org/docs/" target="_blank" rel="noopener">Documentation</a><br><img src="https://docs.dockstore.org/assets/images/docs/Ways_to_get_into_Dockstore.png" alt="image"></p></li><li><p><a href="https://docs.dockstore.org/docs/publisher-tutorials/best-practices-toc/" target="_blank" rel="noopener">Best Practices</a></p></li></ul><h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 中文官方文档</a></li><li><a href="https://www.jianshu.com/p/68e727dda16d" target="_blank" rel="noopener">如何优雅地发布Hexo博客</a></li></ul><h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><ul><li><a href="https://www.w3cschool.cn/markdownyfsm/" target="_blank" rel="noopener">Markdown 语法说明</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程脚本语言&quot;&gt;&lt;a href=&quot;#流程脚本语言&quot; class=&quot;headerlink&quot; title=&quot;流程脚本语言&quot;&gt;&lt;/a&gt;流程脚本语言&lt;/h1&gt;&lt;h2 id=&quot;nextflow&quot;&gt;&lt;a href=&quot;#nextflow&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="收集器" scheme="http://yoursite.com/categories/%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    
    
      <category term="网址" scheme="http://yoursite.com/tags/%E7%BD%91%E5%9D%80/"/>
    
      <category term="nextflow" scheme="http://yoursite.com/tags/nextflow/"/>
    
      <category term="Snakemake" scheme="http://yoursite.com/tags/Snakemake/"/>
    
      <category term="CWL" scheme="http://yoursite.com/tags/CWL/"/>
    
      <category term="WDL" scheme="http://yoursite.com/tags/WDL/"/>
    
      <category term="Dockstore" scheme="http://yoursite.com/tags/Dockstore/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
