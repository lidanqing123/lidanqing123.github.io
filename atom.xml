<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lidanqing Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-15T11:00:33.224Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lidanqing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Draw.io--在线流程图UML图绘制软件</title>
    <link href="http://yoursite.com/2019/02/15/Draw-io-%E5%9C%A8%E7%BA%BF%E6%B5%81%E7%A8%8B%E5%9B%BEUML%E5%9B%BE%E7%BB%98%E5%88%B6%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/02/15/Draw-io-在线流程图UML图绘制软件/</id>
    <published>2019-02-15T07:37:00.000Z</published>
    <updated>2019-02-15T11:00:33.224Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://about.draw.io/wp-content/uploads/2017/07/drawio_logo_50px.png" alt=""></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.draw.io" target="_blank" rel="noopener">draw.io</a>是由JGraph开发并维护,是一个强大简洁的在线的绘图网站，支持流程图，UML图，架构图，原型图等图标。并且图标资源非常的丰富，方便导入图标资源，基本上现有的图标就能满足大部分的需求。因此我个人是非常安利这个站点的！</p><p>由于官方部署的地址在国外，国内访问比较慢，所以julyme在国内部署了一份。屏蔽了google driver、one driver等第三方存储，只保留github存储，便于使用。访问地址为：<strong><a href="http://draw.julyme.com" target="_blank" rel="noopener">http://draw.julyme.com</a></strong></p><p>我自己也在码云上部署了一份，但是对google driver、one driver等第三方存储未做屏蔽，使用上稍有不便．访问地址为：<strong><a href="http://danqingli.gitee.io/drawio" target="_blank" rel="noopener">http://danqingli.gitee.io/drawio</a></strong></p><p>打开连接后出现下图，可以<strong>新建图表</strong>或<strong>打开本地现有图表</strong>：<br><img src="https://upload-images.jianshu.io/upload_images/671916-fda7c730cfd9c7d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/403" alt=""></p><p>也可以不管它，点击浏览器其他位置，然后选择<strong>＂文件＂</strong> –&gt; <strong>＂从…打开＂</strong> –&gt;　<strong>＂GitHub＂</strong>, 从github中打开图表<br><img src="http://julyme.com:8080/attachment/20180126/a7d4d6a775b14b9c9d45435c5ab5365d.png" alt=""></p><p>保存文件时，选择<strong>＂文件＂</strong> –&gt; <strong>＂另存为＂</strong> ，然后保存到github或本地.<br><img src="http://julyme.com:8080/attachment/20180126/1fc42761a5294936b6cc550125d59aeb.png" alt=""></p><h1 id="简单例图"><a href="#简单例图" class="headerlink" title="简单例图"></a>简单例图</h1><h2 id="BPMN-Diagrams"><a href="#BPMN-Diagrams" class="headerlink" title="BPMN Diagrams"></a>BPMN Diagrams</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/bpmn-with-drawio.png" width="50%" align="center"></p><h2 id="UML-Diagrams"><a href="#UML-Diagrams" class="headerlink" title="UML Diagrams"></a>UML Diagrams</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/uml-diagram-with-drawio.png" width="50%" align="center"></p><h2 id="Flow-Charts"><a href="#Flow-Charts" class="headerlink" title="Flow Charts"></a>Flow Charts</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/flow-chart-with-drawio.png" width="50%" align="center"></p><h2 id="Tree-Diagrams"><a href="#Tree-Diagrams" class="headerlink" title="Tree Diagrams"></a>Tree Diagrams</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/org-chart-with-drawio.png" width="50%" align="center"></p><h2 id="Mind-Maps"><a href="#Mind-Maps" class="headerlink" title="Mind Maps"></a>Mind Maps</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/mind-map-with-drawio.png" width="50%" align="center"></p><h2 id="Network-Diagrams"><a href="#Network-Diagrams" class="headerlink" title="Network Diagrams"></a>Network Diagrams</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/network-diagram-with-drawio.png" width="50%" align="center"></p><h2 id="Wireframe-Models"><a href="#Wireframe-Models" class="headerlink" title="Wireframe Models"></a>Wireframe Models</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/wireframe-with-drawio.png" width="50%" align="center"></p><h2 id="Mockups"><a href="#Mockups" class="headerlink" title="Mockups"></a>Mockups</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/mockup-with-drawio.png" width="50%" align="center"></p><h2 id="Venn-Diagrams"><a href="#Venn-Diagrams" class="headerlink" title="Venn Diagrams"></a>Venn Diagrams</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/mockup-with-drawio.png" width="50%" align="center"></p><h2 id="Gantt-Charts"><a href="#Gantt-Charts" class="headerlink" title="Gantt Charts"></a>Gantt Charts</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/Gantt Chart.png" width="50%" align="center"></p><h2 id="Rack-Diagrams"><a href="#Rack-Diagrams" class="headerlink" title="Rack Diagrams"></a>Rack Diagrams</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/Rack Diagram.png" width="50%" align="center"></p><h2 id="Sequence-Diagrams"><a href="#Sequence-Diagrams" class="headerlink" title="Sequence Diagrams"></a>Sequence Diagrams</h2><p><img src="https://raw.githubusercontent.com/lidanqing123/drawio.picture/master/Sequence Diagram.png" width="50%" align="center"></p><h1 id="简单教程"><a href="#简单教程" class="headerlink" title="简单教程"></a>简单教程</h1><h2 id="绘图区"><a href="#绘图区" class="headerlink" title="绘图区"></a>绘图区</h2><p>进入应用后，界面非常直观简洁。顶部菜单栏提供各项基本操作，左侧是图形区，中间部分是画布，右侧部分是检查器，根据当前的元素显示不同的操作。<br><img src="http://t12.baidu.com/it/u=438471833,270321778&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=449&amp;s=74107C330F2B61281ED581CA000050B3" alt=""></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>整个界面的操作非常直观，如果有相关绘图软件的使用经验，相信已经可以上手绘图了。</p><ul><li>添加图形<ul><li>通过简单的拖拽，即可在画布上面添加图形。</li></ul></li><li>添加文本<ul><li>在画布上任何位置双击都可以添加文本框，在其中输入文字</li></ul></li><li>添加链接<ul><li>在图形上鼠标悬浮，在图形上会浮现基本的链接点。这里分为外边界蓝色的大箭头和边上的x型焦点。这两种链接方式稍有不同，在后面我会详细说明。</li></ul></li></ul><p><img src="http://t10.baidu.com/it/u=2937757284,61908897&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=449&amp;s=3D287C32073B752C1EDDC5CA000050B3" alt=""></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="移动、多选、复制与删除"><a href="#移动、多选、复制与删除" class="headerlink" title="移动、多选、复制与删除"></a>移动、多选、复制与删除</h3><p>图形、链接、文本这三个元素都可以被选中。可以使用cmd(windows下为ctrl，下同) + A 选择全部元素，也可以使用cmd + click(鼠标左键点击)来进行特定元素的多选。选择元素后可以进行以下操作</p><ul><li>移动：拖拽</li><li>复制： cmd + C</li><li>复制并粘贴： cmd + D</li><li>删除：delete键</li></ul><h3 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h3><p>上面提到过在图形上面悬浮鼠标会出现图形的链接点。</p><ul><li>使用蓝色箭头进行快速链接<ul><li>点击蓝色箭头，会在指定方向创建链接，并在链接末端生成一个完全一致的元素</li><li>如果需要控制链接位置，可以按住ctrl键，拖拽蓝色箭头到指定位置</li></ul></li></ul><p><img src="http://t10.baidu.com/it/u=281153589,242286802&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=449&amp;s=1C087C32171B746D1CD500DA0000C0B3" alt=""></p><p><img src="http://t11.baidu.com/it/u=3510377434,2129413456&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=449&amp;s=3D087C32131B606F0ED5C1DA000050B3" alt=""></p><ul><li>链接图形<ul><li>在悬浮图形后选择x型焦点（会高亮为绿色）可以创建链接，拖拽链接线到目标图形上的x型焦点，完成固定链接</li><li>在悬浮图形后选择x型焦点（会高亮为绿色）可以创建链接，拖拽链接线到目标图形的边上，直到图形外边变成蓝色，松开鼠标，完成浮动链接</li></ul></li></ul><p><img src="http://t11.baidu.com/it/u=1560545545,4072970301&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=449&amp;s=3D087C32131B606F1ED581DA000050B3" alt=""></p><p><img src="http://t10.baidu.com/it/u=2857531284,2367564462&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=449&amp;s=3D287C321B0F644B1ED5A1DA000050B3" alt=""></p><p>固定链接是指链接始终固定在图形的链接点上，不会随着图形移动而变化，浮动链接则会根据图形的移动在图形的边上进行移动自适应。如下图，固定链接始终固定在右边，而浮动链接则从上边移动到了下边</p><p><img src="http://t11.baidu.com/it/u=2051564419,3467119005&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=449&amp;s=1C2874321B1F60491EDD94CE000010B3" alt=""></p><h3 id="图形替换与旋转"><a href="#图形替换与旋转" class="headerlink" title="图形替换与旋转"></a>图形替换与旋转</h3><p>通过快速创建链接的方式可以快速的创建图形并进行链接，但是如果需要不同的图形呢？</p><ul><li>替换：从左侧图形库选择需要的图形，拖拽到要替换的图形中央，直到出现了一个替换的褐色标志，松开即可实现替换</li></ul><p><img src="http://t11.baidu.com/it/u=3758356162,3345968085&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=449&amp;s=1C2874321F0F60494EDD91CA000080B3" alt=""></p><ul><li>旋转：选中图形，拖拽上方的旋转箭头即可</li></ul><h2 id="制作流程图"><a href="#制作流程图" class="headerlink" title="制作流程图"></a>制作流程图</h2><h3 id="基本绘图"><a href="#基本绘图" class="headerlink" title="基本绘图"></a>基本绘图</h3><p>掌握了图形，文本和链接的基本操作，就可以实操来画一个流程图了，检验一下学习效果，如果哪一个部分不够熟练可以温习一下上面的教程</p><p><img src="http://t11.baidu.com/it/u=4072079944,1989091876&amp;fm=173&amp;app=25&amp;f=JPEG?w=639&amp;h=410&amp;s=3CAE74320B565C4B0AF5A0DA0000D0B3" alt=""></p><h3 id="编辑样式"><a href="#编辑样式" class="headerlink" title="编辑样式"></a>编辑样式</h3><p>选中元素在右侧的检查器可以修改元素的颜色，大小，布局等等。请读者自行操作。</p><p><img src="http://t11.baidu.com/it/u=2772105331,1698841456&amp;fm=173&amp;app=25&amp;f=JPEG?w=639&amp;h=410&amp;s=3C2C74330773452A5EF988DA0000C0B3" alt=""></p><h2 id="保存和导出"><a href="#保存和导出" class="headerlink" title="保存和导出"></a>保存和导出</h2><p>在File菜单可以执行保存，并将图片导出成图片或其他格式的文件。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>介绍draw.io的基本组成元素：图形、链接、文本</li><li>介绍元素的基本操作</li><li>介绍链接的创建方式</li><li>介绍元素的替换方法</li></ul><p>实际上借助draw.io的模板库还可以绘制更多种类的图，包括UML图，结构图等等。限于篇幅本文就不进行介绍了，但是总体还是离不开本文介绍的基本操作。希望大家阅读完本文能够有所收获，绘制简洁大方的图表，提升自己的软实力！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://about.draw.io/wp-content/uploads/2017/07/drawio_logo_50px.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="流程图" scheme="http://yoursite.com/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    
      <category term="UML" scheme="http://yoursite.com/tags/UML/"/>
    
      <category term="Draw.io" scheme="http://yoursite.com/tags/Draw-io/"/>
    
  </entry>
  
  <entry>
    <title>使用Sphinx + reST编写文档</title>
    <link href="http://yoursite.com/2019/02/14/%E4%BD%BF%E7%94%A8Sphinx-reST%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2019/02/14/使用Sphinx-reST编写文档/</id>
    <published>2019-02-14T05:20:00.000Z</published>
    <updated>2019-02-14T05:52:15.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h1><blockquote><p>使用者说:<br>“为这个伟大的工具而干杯，因为她让所有的程序员们愿意 编写文档！”</p></blockquote><p>Sphinx是一个工具，她能够轻易地创建智慧和优雅的文档，她是出自Georg Brandl之手，在BSD许可证下授权。</p><p>她最初是为了新版的<a href="http://docs.python.org/" target="_blank" rel="noopener">python文档</a>， 因此在python项目的文档具有完美的特性，但是同样支持c/c++，目前正在计划增加对其他的语言的支持。 理所当然，本页面也是使用Sphinx创造自reStructuredText格式源！Sphinx具有如下的特点：</p><ul><li><strong>输出格式</strong>： 超文本标记语言 (包括Windows HTML帮助)，LaTeX (可打印的PDF版本)，手册页，纯文本</li><li><strong>丰富的交叉引用</strong>： 语义标记以及针对函数，类，引用，词汇表（术语）和相似的信息块的自动链接</li><li><strong>层次结构</strong>： 简单的文本树定义，就能自动地链接到同层（兄弟姐妹）、上一层（父母）以及下一层（子女）的文本位置</li><li><strong>自动生成目录</strong>： 通用索引以及语言模块的目录</li><li><strong>代码高亮</strong>： 代码自动高亮，通过使用 <a href="http://pygments.org/" target="_blank" rel="noopener">Pygments</a></li><li><strong>扩展功能</strong>： 自动测试的代码片段，包括从Python模块（API文档）的文档字符串</li></ul><p>Sphinx 使用 <a href="http://docutils.sf.net/rst.html" target="_blank" rel="noopener">reStructuredText</a> 作为她的标记语言，她的优点大部分是来自于reStructuredText 以及reStructuredText的解析和转换工具（套件）<a href="http://docutils.sf.net/" target="_blank" rel="noopener">Docutils</a>的强大以及简单明了。 </p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p><strong><a href="http://www.pythondoc.com/sphinx/tutorial.html" target="_blank" rel="noopener">初熟Sphinx</a></strong> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;  <strong><a href="http://www.pythondoc.com/sphinx/contents.html" target="_blank" rel="noopener">目录</a></strong><br><em>基本功能的概述</em> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <em>全部的内容</em></p><p><strong><a href="http://www.pythondoc.com/sphinx/search.html" target="_blank" rel="noopener">搜索页</a></strong> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; <strong><a href="http://www.pythondoc.com/sphinx/genindex.html" target="_blank" rel="noopener">通用索引</a></strong><br><em>搜索全文</em> &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;  <em>所有的函数，类，词条</em></p><p>你也能下载PDF格式的Sphinx文档：一种PDF <a href="http://sphinx.pocoo.org/sphinx.pdf" target="_blank" rel="noopener">版本</a> 是由LaTeX Sphinx生成，另一种PDF <a href="http://sphinx.pocoo.org/sphinx-rst2pdf.pdf" target="_blank" rel="noopener">版本</a> 是由rst2pdf生成。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>用Sphinx生成文档的项目能够在 <a href="http://www.pythondoc.com/sphinx/examples.html" target="_blank" rel="noopener">Projects using Sphinx</a>上找到。</p><p>想要查看Sphinx源文件长得什么样的话，可以在除本欢迎页外的任何页面上使用“显示网页源代码”。</p><p>你也许对这份十分不错 <a href="http://matplotlib.sourceforge.net/sampledoc/" target="_blank" rel="noopener">教程</a>感兴趣，它是由matplotlib的开发者编写，是使用了Sphinx创建地自定义的文档。</p><h1 id="下载-Sphinx"><a href="#下载-Sphinx" class="headerlink" title="下载 Sphinx"></a>下载 Sphinx</h1><p>Sphinx是一个可用的 <a href="http://peak.telecommunity.com/DevCenter/EasyInstall" target="_blank" rel="noopener">easy-install</a>包在 Python Package Index.</p><p>源码能够在下面的地址中找到： <code>http://bitbucket.org/birkenfeld/sphinx/</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Welcome&quot;&gt;&lt;a href=&quot;#Welcome&quot; class=&quot;headerlink&quot; title=&quot;Welcome&quot;&gt;&lt;/a&gt;Welcome&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用者说:&lt;br&gt;“为这个伟大的工具而干杯，因为她让所有的程序员们愿意 编
      
    
    </summary>
    
    
      <category term="Sphinx" scheme="http://yoursite.com/tags/Sphinx/"/>
    
      <category term="reStructuredText" scheme="http://yoursite.com/tags/reStructuredText/"/>
    
      <category term="编写文档" scheme="http://yoursite.com/tags/%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Jinja2中文文档</title>
    <link href="http://yoursite.com/2019/02/14/Jinja2%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2019/02/14/Jinja2中文文档/</id>
    <published>2019-02-14T05:10:00.000Z</published>
    <updated>2019-02-14T05:15:41.074Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文出处：<a href="http://docs.jinkan.org/docs/jinja2/index.html" target="_blank" rel="noopener">欢迎来到 Jinja2</a> </p></blockquote><p>Jinja2 是一个现代的，设计者友好的，仿照 Django 模板的 Python 模板语言。 它速度快，被广泛使用，并且提供了可选的沙箱模板执行环境保证安全:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for user in users %&#125;</span><br><span class="line">  &lt;li&gt;&lt;a href=&quot;&#123;&#123; user.url &#125;&#125;&quot;&gt;&#123;&#123; user.username &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p><strong>特性</strong>:</p><ul><li>沙箱中执行</li><li>强大的 HTML 自动转义系统保护系统免受 XSS</li><li>模板继承</li><li>及时编译最优的 python 代码</li><li>可选提前编译模板的时间</li><li>易于调试。异常的行数直接指向模板中的对应行。</li><li>可配置的语法</li></ul><p>如果你接触过其它的基于文本的模板语言，比如 Smarty 或 Django ，那么 Jinja2 会让你有 宾至如归的感觉。Jinja2 通过坚持 Python 原则来保证对设计者和开发者友好，为模板环境添加有帮助的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文出处：&lt;a href=&quot;http://docs.jinkan.org/docs/jinja2/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;欢迎来到 Jinja2&lt;/a&gt; &lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Jinja2" scheme="http://yoursite.com/tags/Jinja2/"/>
    
      <category term="模板语言" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>使用ReadtheDocs托管文档</title>
    <link href="http://yoursite.com/2019/02/13/%E4%BD%BF%E7%94%A8ReadtheDocs%E6%89%98%E7%AE%A1%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2019/02/13/使用ReadtheDocs托管文档/</id>
    <published>2019-02-13T05:42:00.000Z</published>
    <updated>2019-02-13T09:26:30.034Z</updated>
    
    <content type="html"><![CDATA[<p>Read the Docs是一个在线文档托管服务， 你可以从各种版本控制系统中导入文档，如果你使用webhooks， 那么每次提交代码后可以自动构建并上传至readthedocs网站，非常方便。</p><p>一般来讲，这个非常适合写软件文档以及编写一些教程、电子书之类。对于一些一两篇文章就能写清楚的可以记笔记或写博客， 但是如果要写成一个系列的，不如写成一本书的形式，更美观，也更系统。</p><p>现有的写电子书的方式，有以下几个解决方案，优劣势也很明显：</p><ul><li>写博客，跟散文堆在一起，不便索引。</li><li>GitHub Wiki，适合做知识整理，但排版一般，不方便查看。</li><li>GitBook，样式不好看，访问速度慢。</li></ul><p>经过比较最后锁定Sphinx + GitHub + ReadtheDocs 作为文档写作工具，用 Sphinx 生成文档，GitHub 托管文档，再导入到 ReadtheDocs。</p><h1 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h1><p>Sphinx是一个基于Python的文档生成项目，最早只是用来生成 Python 官方文档，随着工具的完善， 越来越多的知名的项目也用他来生成文档，甚至完全可以用他来写书采用了reStructuredText作为文档写作语言, 不过也可以通过模块支持其他格式，待会我会介绍怎样支持MarkDown格式。</p><h2 id="安装Sphinx"><a href="#安装Sphinx" class="headerlink" title="安装Sphinx:"></a>安装Sphinx:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sphinx sphinx-autobuild sphinx_rtd_theme</span><br></pre></td></tr></table></figure><p>这一步时间会安装很多python依赖，耐心等等..</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a>初始化:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建文档根目录</span><br><span class="line">mkdir -p /root/work/scrapy-cookbook</span><br><span class="line">cd scrapy-cookbook/</span><br><span class="line"># 可以回车按默认配置来写</span><br><span class="line">sphinx-quickstart</span><br></pre></td></tr></table></figure><p>下面是我填写的，其他基本上默认即可：</p><blockquote><p>Separate source and build directories (y/n) [n]:y Project name: scrapy-cookbook Author name(s): Xiong Neng Project version []: 0.2 Project release [1.0]: 0.2.2 Project language [en]: zh_CN</p></blockquote><p>安装软件tree查看目录树结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tree</span><br></pre></td></tr></table></figure></p><p>然后运行 <code>tree -C .</code> 查看生成的sphinx结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── make.bat</span><br><span class="line">├── Makefile</span><br><span class="line">└── source</span><br><span class="line">    ├── conf.py</span><br><span class="line">    ├── index.rst</span><br><span class="line">    ├── _static</span><br><span class="line">    └── _templates</span><br></pre></td></tr></table></figure></p><p>添加一篇文章，在source目录下新建hello.rst，内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello,world</span><br><span class="line">=============</span><br></pre></td></tr></table></figure></p><p>index.rst 修改如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Contents:</span><br><span class="line">.. toctree::</span><br><span class="line">   :maxdepth: 2</span><br><span class="line"></span><br><span class="line">   hello</span><br></pre></td></tr></table></figure></p><h2 id="更改主题-sphinx-rtd-theme"><a href="#更改主题-sphinx-rtd-theme" class="headerlink" title="更改主题 sphinx_rtd_theme"></a>更改主题 sphinx_rtd_theme</h2><p>更改source/conf.py:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sphinx_rtd_theme</span><br><span class="line">html_theme = &quot;sphinx_rtd_theme&quot;</span><br><span class="line">html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]</span><br></pre></td></tr></table></figure></p><h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><p><img src="https://xnstatic-1253397658.file.myqcloud.com/rtd01.png" alt=""></p><p>toctree 支持多级目录,比如要想将python.rst,java.rst笔记在不同的目录,toctree这样设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Contents:</span><br><span class="line"></span><br><span class="line">.. toctree::</span><br><span class="line"></span><br><span class="line">   python/python</span><br><span class="line">   swift/swift</span><br></pre></td></tr></table></figure></p><p>注意中间的空行</p><h1 id="支持markdown编写"><a href="#支持markdown编写" class="headerlink" title="支持markdown编写"></a>支持markdown编写</h1><p>通过recommonmark 来支持markdown<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install recommonmark</span><br></pre></td></tr></table></figure></p><p>然后更改conf.py:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from recommonmark.parser import CommonMarkParser</span><br><span class="line">source_parsers = &#123;</span><br><span class="line">    &apos;.md&apos;: CommonMarkParser,</span><br><span class="line">&#125;</span><br><span class="line">source_suffix = [&apos;.rst&apos;, &apos;.md&apos;]</span><br></pre></td></tr></table></figure></p><h2 id="AutoStructify"><a href="#AutoStructify" class="headerlink" title="AutoStructify"></a>AutoStructify</h2><p>如果想使用高级功能，可以添加AutoStructify配置，在conf.py中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># At top on conf.py (with other import statements)</span><br><span class="line">import recommonmark</span><br><span class="line">from recommonmark.transform import AutoStructify</span><br><span class="line"></span><br><span class="line"># At the bottom of conf.py</span><br><span class="line">def setup(app):</span><br><span class="line">    app.add_config_value(&apos;recommonmark_config&apos;, &#123;</span><br><span class="line">            &apos;url_resolver&apos;: lambda url: github_doc_root + url,</span><br><span class="line">            &apos;auto_toc_tree_section&apos;: &apos;Contents&apos;,</span><br><span class="line">            &#125;, True)</span><br><span class="line">    app.add_transform(AutoStructify)</span><br></pre></td></tr></table></figure></p><p>网上有个详细配置: <a href="https://github.com/rtfd/recommonmark/blob/master/docs/conf.py" target="_blank" rel="noopener">https://github.com/rtfd/recommonmark/blob/master/docs/conf.py</a></p><p>然后修改刚刚的hello.rst，改用熟悉的hello.md编写:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## hello world</span><br><span class="line"></span><br><span class="line">### test markdown</span><br></pre></td></tr></table></figure></p><p>再次运行make html后看效果，跟前面一样。</p><h1 id="GitHub托管"><a href="#GitHub托管" class="headerlink" title="GitHub托管"></a>GitHub托管</h1><p>一般的做法是将文档托管到版本控制系统比如github上面，push源码后自动构建发布到readthedoc上面， 这样既有版本控制好处，又能自动发布到readthedoc，实在是太方便了。</p><p>先在GitHub创建一个仓库名字叫scrapy-cookbook， 然后在本地.gitignore文件中添加build/目录，初始化git，commit后，添加远程仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /path/scrapy-cookbook</span><br><span class="line">git init</span><br><span class="line">git add Makefile make.bat build/ source/</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/lidanqing123/Nextflow-s-documentation.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>具体几个步骤非常简单，参考官方文档：<a href="https://github.com/rtfd/readthedocs.org" target="_blank" rel="noopener">https://github.com/rtfd/readthedocs.org</a>:</p><ol><li>在Read the Docs上面注册一个账号</li><li>登陆后点击 “Import”.</li><li>给该文档项目填写一个名字比如 “scrapy-cookbook”, 并添加你在GitHub上面的工程HTTPS链接, 选择仓库类型为Git</li><li>其他项目根据自己的需要填写后点击 “Create”，创建完后会自动去激活Webhooks，不用再去GitHub设置</li><li>一切搞定，从此只要你往这个仓库push代码，readthedoc上面的文档就会自动更新.</li></ol><p>注：在创建read the docs项目时候，语言选择”Simplified Chinese”</p><p>在构建过程中出现任何问题，都可以登录readthedoc找到项目中的”构建”页查看构建历史，点击任何一条查看详细日志:<br><img src="https://xnstatic-1253397658.file.myqcloud.com/rtd02.png" alt=""></p><p>我将自己以前博客里面的关于scrapy的文章都迁移至readthedoc，现在看看效果：<br><img src="https://xnstatic-1253397658.file.myqcloud.com/rtd03.png" alt=""></p><h1 id="生成PDF"><a href="#生成PDF" class="headerlink" title="生成PDF"></a>生成PDF</h1><p>首先要安装TeX Live，CentOS 7的yum库中的TeX Live版本比较老，所以直接安装官网上的版本。</p><p>在官网页面 下载安装包install-tl-unx.tar.gz</p><p>如果先安装依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-Digest-MD5</span><br></pre></td></tr></table></figure></p><p>然后解压缩安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxf install-tl-unx.tar.gz</span><br><span class="line">cd install-tl-*</span><br><span class="line">./install-tl  # install-tl-windows on Windows</span><br><span class="line">[... messages omitted ...]</span><br><span class="line">Enter command: i</span><br><span class="line">[... when done, see below for post-install ...]</span><br></pre></td></tr></table></figure></p><p>安装时间会比较长，我这里安装大概要50分钟左右，请耐心等待…</p><p>安装完后配置PATH，在/etc/profile后面添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/texlive/2016/bin/x86_64-linux:$PATH</span><br></pre></td></tr></table></figure></p><p>注意上面的路径改成你自己正确的路径，然后执行source /etc/profile即可</p><p>如果要生成中文PDF，还需要确认安装了东亚语言包和字体包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yum -y install fontconfig ttmkfdir</span><br><span class="line"># /usr/share目录就可以看到fonts和fontconfig目录</span><br><span class="line"># 首先在/usr/share/fonts目录下新建一个目录chinese：</span><br><span class="line">cd /usr/share/fonts</span><br><span class="line">mkdir chinese</span><br><span class="line"># 紧接着需要修改chinese目录的权限：</span><br><span class="line">chmod -R 755 /usr/share/fonts/chinese</span><br><span class="line"># 从C:/Windows/Fonts目录复制你想要的字体到chinese文件夹</span><br><span class="line"># msyh.ttf msyhbd.ttf simhei.ttf simsun.ttc wqy-microhei.ttc YaHeiConsolas.ttf</span><br><span class="line">ttmkfdir -e /usr/share/X11/fonts/encodings/encodings.dir</span><br><span class="line">vi /etc/fonts/fonts.conf</span><br><span class="line">&lt;!-- Font directory list --&gt;</span><br><span class="line">&lt;dir&gt;/usr/share/fonts&lt;/dir&gt;</span><br><span class="line">&lt;dir&gt;/usr/share/fonts/chinese&lt;/dir&gt;</span><br><span class="line"></span><br><span class="line">fc-cache</span><br><span class="line">fc-list :zh</span><br></pre></td></tr></table></figure></p><p>要用XeLaTeX 取代 pdflatex，我們需要修改conf.py:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注：在生成html的时候这句话要注释</span><br><span class="line">latex_engine = &apos;xelatex&apos;</span><br></pre></td></tr></table></figure></p><p>然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">make latexpdf</span><br></pre></td></tr></table></figure></p><p>完成之后在build/latex目录中即可找到生成的pdf文件了。</p><ol><li>ReadTheDocs可以自动生成中文PDF，但ReadTheDocs服务器里的TeXLive版本太老， 导致只能使用pdflatex而不能使用xelatex编译，再加上服务器上中文字体的限制， 所以生成的PDF效果较差，故不采用ReadTheDocs生成的PDF</li><li>本地安装TeXLive 2016，用xelatex编译，可生成更好效果的PDF，目前的策略是在本地生成PDF。</li></ol><h1 id="生成繁体PDF"><a href="#生成繁体PDF" class="headerlink" title="生成繁体PDF"></a>生成繁体PDF</h1><p>先安装opencc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/BYVoid/OpenCC/archive/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line">yum install -y cmake gcc gcc-c++ doxygen</span><br><span class="line">cd OpenCC-master</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">ln -s /usr/lib/libopencc.so.2 /usr/lib64/libopencc.so.2</span><br></pre></td></tr></table></figure></p><p>写一个shell脚本来转换源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 将某个文件夹所有文件简体转换成繁体字</span><br><span class="line"></span><br><span class="line">curdir=`pwd`</span><br><span class="line">file_dir=$&#123;curdir&#125;/$1</span><br><span class="line">for f in $(find $file_dir -type f); do</span><br><span class="line">    #echo $f</span><br><span class="line">    opencc -i &quot;$&#123;f&#125;&quot; -o &quot;$&#123;f&#125;_&quot;</span><br><span class="line">    mv -f &quot;$&#123;f&#125;_&quot; &quot;$&#123;f&#125;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>简体转繁体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stot.sh scrapy-cookbook/source/</span><br></pre></td></tr></table></figure></p><p>然后上面的生成PDF步骤不变。</p><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h3 id="build的时候出现错误：-Package-inputenc-Error-Unicode-char-我-U-6211"><a href="#build的时候出现错误：-Package-inputenc-Error-Unicode-char-我-U-6211" class="headerlink" title="build的时候出现错误：! Package inputenc Error: Unicode char 我 (U+6211)"></a>build的时候出现错误：! Package inputenc Error: Unicode char 我 (U+6211)</h3><p>解决办法，在conf.py中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">latex_elements=&#123;# The paper size (&apos;letterpaper&apos; or &apos;a4paper&apos;).</span><br><span class="line">&apos;papersize&apos;:&apos;a4paper&apos;,# The font size (&apos;10pt&apos;, &apos;11pt&apos; or &apos;12pt&apos;).</span><br><span class="line">&apos;pointsize&apos;:&apos;12pt&apos;,&apos;classoptions&apos;:&apos;,oneside&apos;,&apos;babel&apos;:&apos;&apos;,#必須</span><br><span class="line">&apos;inputenc&apos;:&apos;&apos;,#必須</span><br><span class="line">&apos;utf8extra&apos;:&apos;&apos;,#必須</span><br><span class="line"># Additional stuff for the LaTeX preamble.</span><br><span class="line">&apos;preamble&apos;: r&quot;&quot;&quot;</span><br><span class="line">\usepackage&#123;xeCJK&#125;</span><br><span class="line">\usepackage&#123;indentfirst&#125;</span><br><span class="line">\setlength&#123;\parindent&#125;&#123;2em&#125;</span><br><span class="line">\setCJKmainfont&#123;WenQuanYi Micro Hei&#125;</span><br><span class="line">\setCJKmonofont[Scale=0.9]&#123;WenQuanYi Micro Hei Mono&#125;</span><br><span class="line">\setCJKfamilyfont&#123;song&#125;&#123;WenQuanYi Micro Hei&#125;</span><br><span class="line">\setCJKfamilyfont&#123;sf&#125;&#123;WenQuanYi Micro Hei&#125;</span><br><span class="line">\XeTeXlinebreaklocale &quot;zh&quot;</span><br><span class="line">\XeTeXlinebreakskip = 0pt plus 1pt</span><br><span class="line">&quot;&quot;&quot;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="WARNING-Pygments-lexer-name-u’python-run-py’-is-not-known"><a href="#WARNING-Pygments-lexer-name-u’python-run-py’-is-not-known" class="headerlink" title="WARNING: Pygments lexer name u’python run.py’ is not known"></a>WARNING: Pygments lexer name u’python run.py’ is not known</h3><p>解决办法，写代码的时候别用’’’python run.py这样的格式，不支持</p><h3 id="WARNING-nonlocal-image-URI-found"><a href="#WARNING-nonlocal-image-URI-found" class="headerlink" title="WARNING: nonlocal image URI found"></a>WARNING: nonlocal image URI found</h3><p>解决办法，更改conf.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import sphinx.environment</span><br><span class="line">from docutils.utils import get_source_line</span><br><span class="line"></span><br><span class="line">def _warn_node(self, msg, node, **kwargs):</span><br><span class="line">    if not msg.startswith(&apos;nonlocal image URI found:&apos;):</span><br><span class="line">        self._warnfunc(msg, &apos;%s:%s&apos; % get_source_line(node), **kwargs)</span><br><span class="line"></span><br><span class="line">sphinx.environment.BuildEnvironment.warn_node = _warn_node</span><br></pre></td></tr></table></figure></p><h3 id="生成的PDF文件中图片不能显示的问题"><a href="#生成的PDF文件中图片不能显示的问题" class="headerlink" title="生成的PDF文件中图片不能显示的问题"></a>生成的PDF文件中图片不能显示的问题</h3><p>解决办法，因为文章里面引用的是外部图片链接，导致不能显示图片， 将图片下载到source/images目录，然后改链接为相对路径。</p><p>如要居中显示图片，使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;![scrapy架构图](/images/scrapy.png)&lt;/center&gt;</span><br></pre></td></tr></table></figure></p><h3 id="自动生成标题问题"><a href="#自动生成标题问题" class="headerlink" title="自动生成标题问题"></a>自动生成标题问题</h3><p>修改conf.py将manual改成howto<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">latex_documents = [</span><br><span class="line">    (master_doc, &apos;scrapy-cookbook.tex&apos;, u&apos;scrapy-cookbook Documentation&apos;,</span><br><span class="line">     u&apos;Xiong Neng&apos;, &apos;howto&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="图片覆盖文字的问题"><a href="#图片覆盖文字的问题" class="headerlink" title="图片覆盖文字的问题"></a>图片覆盖文字的问题</h3><p>养成一个好习惯就是新增图片一定要空一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">one line</span><br><span class="line"></span><br><span class="line">![scrapy架构图](/images/scrapy.png)</span><br><span class="line"></span><br><span class="line">two line</span><br></pre></td></tr></table></figure></p><h3 id="生成的pdf文件中，每个章节都多了一层编号"><a href="#生成的pdf文件中，每个章节都多了一层编号" class="headerlink" title="生成的pdf文件中，每个章节都多了一层编号"></a>生成的pdf文件中，每个章节都多了一层编号</h3><p>我猜测这个问题的原因是sphinx将rst转为LaTex文件，再转为PDF的。sphinx生成的LaTex文件中， 使用了\Section标记段落，默认情况下\Section是自动编号的章节，而\Section*才是不带自动编号的。</p><p>为了解决这个问题，需要手工编辑sphinx生成的python3-cookbook.tex<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd build/latex/</span><br><span class="line">vi scrapy-cookbook.tex</span><br></pre></td></tr></table></figure></p><p>在\setcounter{tocdepth}{2}下增加一行\setcounter{secnumdepth}{-2}</p><p>这行代码关闭了章节编号的计数器，这样生成的PDF就是目录正确且章节不带自动编号。 请注意别乱动里面的东西，删除一个空行也不行。</p><p>然后执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xelatex scrapy-cookbook.tex</span><br></pre></td></tr></table></figure></p><p>这时候生成的pdf文件就是正常格式的了。如果一次执行不成功就再执行一次，很奇怪的事情。</p><p>具体原理解释参见<a href="http://liam0205.me/2015/04/10/how-to-list-unnumbered-section-in-the-table-of-contents/" target="_blank" rel="noopener">http://liam0205.me/2015/04/10/how-to-list-unnumbered-section-in-the-table-of-contents/</a></p><h3 id="优化PDF显示"><a href="#优化PDF显示" class="headerlink" title="优化PDF显示"></a>优化PDF显示</h3><p>这个参考 <a href="https://github.com/yidao620c/python3-cookbook/issues/108" target="_blank" rel="noopener">https://github.com/yidao620c/python3-cookbook/issues/108</a></p><p>编辑tex文件，在导言区的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">前面省略...</span><br><span class="line">\title&#123;《Python Cookbook》第三版&#125;</span><br><span class="line">\date&#123;Dec 09, 2017&#125;</span><br><span class="line">\release&#123;3.0.0&#125;</span><br><span class="line">\author&#123;熊能&#125;</span><br><span class="line">\newcommand&#123;\sphinxlogo&#125;&#123;\vbox&#123;&#125;&#125;</span><br><span class="line">\renewcommand&#123;\releasename&#125;&#123;Release&#125;</span><br><span class="line">\makeindex</span><br><span class="line"></span><br><span class="line">% 隐藏原目录名</span><br><span class="line">\renewcommand&#123;\contentsname&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">% 在 section 前插入分页</span><br><span class="line">\usepackage&#123;titlesec&#125;</span><br><span class="line">\newcommand&#123;\sectionbreak&#125;&#123;\clearpage&#125;</span><br><span class="line"></span><br><span class="line">% 章节编号只编号到 subsection</span><br><span class="line">\newcommand\normalsecnumdepth&#123;\setcounter&#123;secnumdepth&#125;&#123;2&#125;&#125;</span><br><span class="line"></span><br><span class="line">% 所有层次章节都不编号</span><br><span class="line">\newcommand\specialsecnumdepth&#123;\setcounter&#123;secnumdepth&#125;&#123;-2&#125;&#125;  </span><br><span class="line"></span><br><span class="line">% toc 到 subsection</span><br><span class="line">\newcommand\normaltocdepth&#123;</span><br><span class="line">    \setcounter&#123;tocdepth&#125;&#123;2&#125;</span><br><span class="line">    \addtocontents&#123;toc&#125;&#123;\setcounter&#123;tocdepth&#125;&#123;2&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">% toc 到 section</span><br><span class="line">\newcommand\specialtocdepth&#123;</span><br><span class="line">    \setcounter&#123;tocdepth&#125;&#123;1&#125;</span><br><span class="line">    \addtocontents&#123;toc&#125;&#123;\setcounter&#123;tocdepth&#125;&#123;1&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\maketitle</span><br><span class="line">\specialsecnumdepth</span><br><span class="line">\specialtocdepth</span><br><span class="line">\renewcommand&#123;\contentsname&#125;&#123;&#125;</span><br><span class="line">\section&#123;目录&#125;</span><br><span class="line">\vspace&#123;-36pt&#125;</span><br><span class="line">\sphinxtableofcontents</span><br><span class="line">\phantomsection\label&#123;\detokenize&#123;index::doc&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\section&#123;版权&#125;</span><br><span class="line">\label&#123;\detokenize&#123;copyright::doc&#125;&#125;\label&#123;\detokenize&#123;copyright:copyright&#125;&#125;\label&#123;\detokenize&#123;copyright:python-cookbook-3rd-edition-documentation&#125;&#125;</span><br><span class="line">\begin&#123;DUlineblock&#125;&#123;0em&#125;</span><br><span class="line">\item[] 书名：    《Python Cookbook》3rd Edition</span><br><span class="line">\item[] 作者：     David Beazley, Brian K. Jones</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>在 \section{第一章：数据结构和算法} 前插入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\normaltocdepth</span><br></pre></td></tr></table></figure></p><p>在 \section{附录A} 前插入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\specialtocdepth</span><br></pre></td></tr></table></figure></p><p>另外执行下面命令，删除每个章节多余的Contents和下面的一行空格：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;/Contents:/,+1 d&apos; python3-cookbook.tex</span><br></pre></td></tr></table></figure></p><p>再次运行生成命令即可(最好执行2次)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xelatex python3-cookbook.tex</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Read the Docs是一个在线文档托管服务， 你可以从各种版本控制系统中导入文档，如果你使用webhooks， 那么每次提交代码后可以自动构建并上传至readthedocs网站，非常方便。&lt;/p&gt;
&lt;p&gt;一般来讲，这个非常适合写软件文档以及编写一些教程、电子书之类。对
      
    
    </summary>
    
    
      <category term="Sphinx" scheme="http://yoursite.com/tags/Sphinx/"/>
    
      <category term="readthedocs" scheme="http://yoursite.com/tags/readthedocs/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="MarkDown" scheme="http://yoursite.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda,  Conda和 Bioconda相关</title>
    <link href="http://yoursite.com/2019/01/30/Anaconda-Conda%E5%92%8C-Bioconda%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/01/30/Anaconda-Conda和-Bioconda相关/</id>
    <published>2019-01-29T16:12:00.000Z</published>
    <updated>2019-01-30T01:58:26.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Anaconda是一个用于科学计算的<strong>Python发行版</strong>，支持 Linux, Mac, Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。Anaconda利用工具/命令conda来进行package和environment的管理，并且已经包含了Python和相关的配套工具。</p><p>这里先解释下conda、anaconda这些概念的差别。</p><p>conda可以理解为一个工具，也是一个可执行命令，其<strong>核心功能是包管理与环境管理</strong>。包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。</p><p>Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，所以也称为Python的一种发行版。其实还有Miniconda，顾名思义，它只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。</p><p><strong>conda将几乎所有的工具、第三方包都当做package对待，甚至包括python和conda自身！</strong></p><h1 id="Anaconda-Miniconda-安装"><a href="#Anaconda-Miniconda-安装" class="headerlink" title="Anaconda(Miniconda)安装"></a>Anaconda(Miniconda)安装</h1><p>以miniconda安装为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取安装文件</span><br><span class="line">cd ~/</span><br><span class="line">wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh</span><br><span class="line"></span><br><span class="line"># 安装miniconda，根据提示完成安装</span><br><span class="line">cd ~/</span><br><span class="line">bash Miniconda2-latest-MacOSX-x86_64.sh</span><br><span class="line"></span><br><span class="line"># 需新建Terminal Session或手动加载环境变量来使得conda生效</span><br><span class="line"># 手动加载</span><br><span class="line">source ~/.bash_profie</span><br></pre></td></tr></table></figure><h1 id="设置国内镜像源"><a href="#设置国内镜像源" class="headerlink" title="设置国内镜像源"></a>设置国内镜像源</h1><p>添加清华的一系列镜像，加速下载，提高成功率。默认仓库不仅速度极慢，而且经常中断，国内镜像下载速度可达国外几百倍。</p><p>TUNA 提供了 Anaconda 仓库的镜像，运行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></p><h2 id="Conda-三方源"><a href="#Conda-三方源" class="headerlink" title="Conda 三方源"></a>Conda 三方源</h2><p>   当前tuna还维护了一些anaconda三方源。</p><p>   bioconda</p><p>   添加bioconda频道，方便生物软件安装。</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br></pre></td></tr></table></figure><h1 id="conda使用"><a href="#conda使用" class="headerlink" title="conda使用"></a>conda使用</h1><p>这里介绍conda常用的命令操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查看conda版本</span><br><span class="line">$ conda --version</span><br><span class="line">conda 4.3.30</span><br><span class="line"></span><br><span class="line"># 查看对应的python默认版本（默认环境的名字是root，注意这个root不是超级管理员的意思）</span><br><span class="line">$ python --version</span><br><span class="line">Python 3.6.3 :: Anaconda, Inc.</span><br></pre></td></tr></table></figure></p><h2 id="conda的环境管理"><a href="#conda的环境管理" class="headerlink" title="conda的环境管理"></a>conda的环境管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个名为env_test的环境，指定Python版本是2.7（conda会自动寻找2.7.x中的最新版本）</span><br><span class="line">$ conda create --name env_test python=2.7</span><br><span class="line"></span><br><span class="line"># 查看已安装的环境，当前被激活的环境会显示有一个星号</span><br><span class="line">$ conda info -e</span><br><span class="line"># conda environments:</span><br><span class="line">#</span><br><span class="line">env_test /home/xxxx/.conda/envs/env_test</span><br><span class="line">root * /opt/anaconda3</span><br><span class="line"></span><br><span class="line"># 安装好后，使用source activate激活指定环境</span><br><span class="line">$ source activate env_test</span><br><span class="line"></span><br><span class="line"># 再次查看当前python版本，可以看到系统已经切换到了2.7的环境</span><br><span class="line">$ python --version</span><br><span class="line">Python 2.7.14 :: Anaconda, Inc.</span><br><span class="line"></span><br><span class="line"># 退出当前虚拟环境，返回默认python环境</span><br><span class="line">$ source deactivate</span><br><span class="line"></span><br><span class="line"># 删除一个已有的环境</span><br><span class="line">$ conda remove --name env_test --all</span><br></pre></td></tr></table></figure><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前环境下已安装packages</span><br><span class="line">$ conda list</span><br><span class="line"></span><br><span class="line"># 查找package信息</span><br><span class="line">$ conda search numpy</span><br><span class="line"></span><br><span class="line"># 安装package</span><br><span class="line">$ conda install numpy</span><br><span class="line"></span><br><span class="line"># 安装指定版本package</span><br><span class="line">$ conda install numpy=1.13.3</span><br><span class="line"></span><br><span class="line"># 更新package</span><br><span class="line">$ conda update numpy</span><br><span class="line"></span><br><span class="line"># 删除package</span><br><span class="line">$ conda remove numpy</span><br><span class="line"></span><br><span class="line">另外，</span><br><span class="line">$ conda install Keras # 安装keras, 会顺带装上tensorflow, h5py, hdf5等</span><br><span class="line">$ conda install pillow # 安装PIL</span><br><span class="line">$ conda install opencv # 安装cv2</span><br></pre></td></tr></table></figure><h2 id="环境移植"><a href="#环境移植" class="headerlink" title="环境移植"></a>环境移植</h2><p>值得一提的是自己建立的软件环境可以很方便移植到另外一台电脑!</p><p>首先通过<code>source activate target_env</code>要分享的环境<code>target_env</code>，然后输入下面的命令会在当前工作目录下生成一个<code>environment.yml</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env export &gt; environment.yml</span><br></pre></td></tr></table></figure><p>小伙伴拿到<code>environment.yml</code>文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="https://www.anaconda.com/" target="_blank" rel="noopener">Anaconda 官网</a></p><p><a href="http://bioconda.github.io/" target="_blank" rel="noopener">bioconda 官网</a></p><p><a href="https://www.jianshu.com/p/2f3be7781451" target="_blank" rel="noopener">Anaconda安装使用</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">Anaconda 镜像使用帮助</a>| 清华大学开源镜像站</p><p><a href="https://blog.csdn.net/woodcorpse/article/details/82226929" target="_blank" rel="noopener">Nature Method：Bioconda解决生物软件安装的烦恼</a></p><p><a href="https://www.jianshu.com/p/8534e4a5514f" target="_blank" rel="noopener">conda与bioconda解决生信软件安装困扰</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Anaconda是一个用于科学计算的&lt;strong&gt;Python发行版&lt;/strong&gt;，支持 Linux, Mac, Windows系统，
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Anaconda" scheme="http://yoursite.com/tags/Anaconda/"/>
    
      <category term="conda" scheme="http://yoursite.com/tags/conda/"/>
    
      <category term="Miniconda" scheme="http://yoursite.com/tags/Miniconda/"/>
    
      <category term="Bioconda" scheme="http://yoursite.com/tags/Bioconda/"/>
    
  </entry>
  
  <entry>
    <title>Celery 学习资源</title>
    <link href="http://yoursite.com/2019/01/29/Celery-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2019/01/29/Celery-学习资源/</id>
    <published>2019-01-29T03:28:00.000Z</published>
    <updated>2019-01-30T02:30:48.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在程序运行过程中，要执行一个很久的任务，但是我们又不想主程序被阻塞，常见的方法是多线程。可是当并发量过大时，多线程也会扛不住，必须要用线程池来限制并发个数，而且多线程对共享资源的使用也是很麻烦的事情。还有就是协程，但是协程毕竟还是在同一线程内执行的，如果一个任务本身就要执行很长时间，而不是因为等待IO被挂起，那其他协程照样无法得到运行。</p><p>本文要介绍一个强大的分布式任务队列Celery，它可以让任务的执行同主程序完全脱离，甚至不在同一台主机内。它通过队列来调度任务，不用担心并发量高时系统负载过大。它可以用来处理复杂系统性能问题，却又相当灵活易用。下面我们就来了解下Celery。</p><h1 id="Celery-是什么？"><a href="#Celery-是什么？" class="headerlink" title="Celery 是什么？"></a>Celery 是什么？</h1><p>Celery（中文是芹菜的意思）是Python语言实现的分布式队列服务，除了支持即时任务，还支持定时任务，Celery 有5个核心角色。<br><img src="https://user-gold-cdn.xitu.io/2018/10/10/1665e8ee8b12546a?imageView2/0/w/1280/h/960/ignore-error/1" alt=""></p><p>记住这5个角色后面理解Celery就轻松了。</p><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>任务(Task)就是你要做的事情，例如一个注册流程里面有很多任务，给用户发验证邮件就是一个任务，这种耗时的任务就可以交给Celery去处理，还有一种任务是定时任务，比如每天定时统计网站的注册人数，这个也可以交给Celery周期性的处理。</p><h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><p>Broker 的中文意思是经纪人，指为市场上买卖双方提供中介服务的人。在Celery中这个角色相当于数据结构中的队列，介于生产者和消费者之间经纪人。例如一个Web系统中，生产者是主程序，它生产任务，将任务发送给 Broker，消费者是 Worker，是专门用于执行任务的后台服务。Celery本身不提供队列服务，一般用Redis或者RabbitMQ来实现队列服务。</p><h2 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h2><p>Worker 就是那个一直在后台执行任务的人，也成为任务的消费者，它会实时地监控队列中有没有任务，如果有就立即取出来执行。</p><h2 id="Beat"><a href="#Beat" class="headerlink" title="Beat"></a>Beat</h2><p>Beat 是一个定时任务调度器，它会根据配置定时将任务发送给 Broker，等待 Worker 来消费。</p><h2 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h2><p>Backend 用于保存任务的执行结果，每个任务都有返回值，比如发送邮件的服务会告诉我们有没有发送成功，这个结果就是存在Backend中，当然我们并不总是要关心任务的执行结果。</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="http://www.celeryproject.org" target="_blank" rel="noopener">Celery 官网</a></p><p><a href="http://docs.celeryproject.org/en/latest/index.html" target="_blank" rel="noopener">Celery 官方文档英文版</a></p><p><a href="http://docs.jinkan.org/docs/celery/index.html" target="_blank" rel="noopener">Celery 官方文档中文版</a></p><p><a href="http://python.jobbole.com/tag/celery/" target="_blank" rel="noopener">伯乐在线 celery文章</a></p><p><a href="https://www.cnblogs.com/forward-wang/p/5970806.html" target="_blank" rel="noopener">Celery 框架学习笔记</a></p><p><a href="https://www.cnblogs.com/alex3714/articles/6351797.html" target="_blank" rel="noopener">Celery分布式任务队列快速入门</a></p><p><a href="https://blog.csdn.net/freeking101/article/details/74707619" target="_blank" rel="noopener">Python 并行分布式框架 Celery</a></p><p><a href="https://www.cnblogs.com/cwp-bg/p/8759638.html" target="_blank" rel="noopener">python之celery使用详解一</a></p><p><a href="https://juejin.im/post/5bbe18255188255c81391385" target="_blank" rel="noopener">高性能异步框架Celery入坑指南</a></p><p><a href="https://cloud.tencent.com/developer/article/1343719" target="_blank" rel="noopener">在Python中用Celery安排管理后台工作流</a></p><p><a href="https://www.213.name/archives/1105" target="_blank" rel="noopener">笔记：集群部署celery分布式任务队列</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h1&gt;&lt;p&gt;在程序运行过程中，要执行一个很久的任务，但是我们又不想主程序被阻塞，常见的方法是多线程。可是当并发量过大时，多线程也会扛不住
      
    
    </summary>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>docker  or not ?</title>
    <link href="http://yoursite.com/2019/01/29/docker-or-not/"/>
    <id>http://yoursite.com/2019/01/29/docker-or-not/</id>
    <published>2019-01-29T02:29:00.000Z</published>
    <updated>2019-01-29T02:36:00.984Z</updated>
    
    <content type="html"><![CDATA[<p>在生物信息分析方面docker可以做哪些应用?在那些方面可以给我们提供便利?是否有必要转向docker?</p><p>liheng大神的<a href="http://lh3.github.io/2015/04/25/a-few-hours-with-docker" target="_blank" rel="noopener">一段话</a>引发了我的思考</p><blockquote><p>Docker is a bless to complex systems such as the old Apache+MySQL+PHP combo, but is a curse to simple command line tools. For simple tools, it adds multiple complications (security, kernel version, Dockerfile, large package, inter-process communication, etc) with little benefit.</p></blockquote><blockquote><p>Bioinformatics tools are not rocket science. They are supposed to be simple. If they are not simple, we should encourage better practices rather than live with the problems and resort to docker. I am particularly against dockerizing easy-to-compile tools such as velvet and bwa or well packaged tools such as spades. Another large fraction of tools in C/C++ can be compiled to statically linked binaries or shipped with necessary dynamic libraries (see salifish). While not ideal, these are still better solutions than docker. Docker will be needed for some tools with complex dependencies, but I predict most of such tools will be abandoned by users unless they are substantially better than other competitors, which rarely happens in practice.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在生物信息分析方面docker可以做哪些应用?在那些方面可以给我们提供便利?是否有必要转向docker?&lt;/p&gt;
&lt;p&gt;liheng大神的&lt;a href=&quot;http://lh3.github.io/2015/04/25/a-few-hours-with-docker&quot; ta
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>常用网站收集</title>
    <link href="http://yoursite.com/2019/01/28/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2019/01/28/常用网站收集/</id>
    <published>2019-01-28T08:29:00.000Z</published>
    <updated>2019-02-13T02:00:34.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程脚本语言"><a href="#流程脚本语言" class="headerlink" title="流程脚本语言"></a>流程脚本语言</h1><h2 id="nextflow"><a href="#nextflow" class="headerlink" title="nextflow"></a>nextflow</h2><ul><li><a href="https://github.com/nextflow-io/nextflow" target="_blank" rel="noopener">github网址</a></li><li><a href="https://www.nextflow.io/docs/latest/index.html" target="_blank" rel="noopener">Nextflow’s documentation!</a></li><li><a href="http://blog.sina.com.cn/s/blog_b270dd290102w03r.html" target="_blank" rel="noopener">强大的生物信息流程定制工具nextflow</a></li><li><a href="https://www.jianshu.com/p/8fe8b279b4ff" target="_blank" rel="noopener">初识Nextflow (系列之一)</a></li><li><a href="https://www.jianshu.com/p/e192c4b94387" target="_blank" rel="noopener">Nextflow的基本认知(系列之二)</a></li><li><a href="https://www.jianshu.com/p/9d69d662b7e2" target="_blank" rel="noopener">NextFlow的步骤Process(系列之三)</a></li><li><a href="https://www.jianshu.com/p/0de8417fe018" target="_blank" rel="noopener">Nextflow实践中遇到的问题(系列之四)</a></li><li><a href="https://docs.dockstore.org/docs/prereqs/getting-started-with-nextflow/" target="_blank" rel="noopener">Getting Started with Nextflow</a></li></ul><h2 id="Snakemake"><a href="#Snakemake" class="headerlink" title="Snakemake"></a>Snakemake</h2><ul><li><a href="https://snakemake.readthedocs.io/en/stable/tutorial/tutorial.html" target="_blank" rel="noopener">Snakemake Tutorial</a></li><li><a href="https://www.jianshu.com/p/14b9eccc0c0e" target="_blank" rel="noopener">snakemake使用笔记</a></li></ul><h2 id="CWL"><a href="#CWL" class="headerlink" title="CWL"></a>CWL</h2><ul><li><a href="https://www.commonwl.org/" target="_blank" rel="noopener">Common Workflow Language</a></li><li><a href="https://docs.dockstore.org/docs/prereqs/getting-started-with-cwl/" target="_blank" rel="noopener">Getting Started with CWL</a></li></ul><h2 id="WDL"><a href="#WDL" class="headerlink" title="WDL"></a>WDL</h2><ul><li><a href="https://software.broadinstitute.org/wdl/documentation/" target="_blank" rel="noopener">User Guide</a></li><li><a href="https://docs.dockstore.org/docs/prereqs/getting-started-with-wdl/" target="_blank" rel="noopener">Getting Started with WDL</a></li><li><a href="https://wenlongshen.github.io/2018/09/15/Pipelining-Solution-2/" target="_blank" rel="noopener">WDL入门 </a></li><li><a href="https://blog.csdn.net/theomarker/article/details/79651223?utm_source=blogxgwz5" target="_blank" rel="noopener">WDL学习</a></li><li><a href="https://www.jianshu.com/p/41f377e20ff7" target="_blank" rel="noopener">GATK官方推荐的workflow语言-WDL</a></li></ul><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul><li><a href="https://www.biostars.org/p/258436/" target="_blank" rel="noopener">Snakemake vs. Nextflow: strengths and weaknesses</a></li><li><a href="https://www.biostars.org/p/345998/" target="_blank" rel="noopener">workflow management system : WDL, CWL, Ruffus, SnakeMake, etc </a></li></ul><h2 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h2><ul><li><a href="https://www.colabug.com/297465.html" target="_blank" rel="noopener">华大基因举办第二届基因组云计算技术开发者大会</a></li></ul><h2 id="Dockstore"><a href="#Dockstore" class="headerlink" title="Dockstore"></a><a href="https://dockstore.org/" target="_blank" rel="noopener">Dockstore</a></h2><p>Dockstore, developed by the Cancer Genome Collaboratory, is an open platform used by the GA4GH for sharing Docker-based tools described with the Common Workflow Language (CWL), the Workflow Description Language (WDL), or Nextflow (NFL)</p><ul><li><p><a href="https://docs.dockstore.org/docs/" target="_blank" rel="noopener">Documentation</a><br><img src="https://docs.dockstore.org/assets/images/docs/Ways_to_get_into_Dockstore.png" alt="image"></p></li><li><p><a href="https://docs.dockstore.org/docs/publisher-tutorials/best-practices-toc/" target="_blank" rel="noopener">Best Practices</a></p></li></ul><h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 中文官方文档</a></li><li><a href="https://www.jianshu.com/p/68e727dda16d" target="_blank" rel="noopener">如何优雅地发布Hexo博客</a></li></ul><h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><ul><li><a href="https://www.w3cschool.cn/markdownyfsm/" target="_blank" rel="noopener">Markdown 语法说明</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程脚本语言&quot;&gt;&lt;a href=&quot;#流程脚本语言&quot; class=&quot;headerlink&quot; title=&quot;流程脚本语言&quot;&gt;&lt;/a&gt;流程脚本语言&lt;/h1&gt;&lt;h2 id=&quot;nextflow&quot;&gt;&lt;a href=&quot;#nextflow&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="收集器" scheme="http://yoursite.com/categories/%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    
    
      <category term="网址" scheme="http://yoursite.com/tags/%E7%BD%91%E5%9D%80/"/>
    
      <category term="nextflow" scheme="http://yoursite.com/tags/nextflow/"/>
    
      <category term="Snakemake" scheme="http://yoursite.com/tags/Snakemake/"/>
    
      <category term="CWL" scheme="http://yoursite.com/tags/CWL/"/>
    
      <category term="WDL" scheme="http://yoursite.com/tags/WDL/"/>
    
      <category term="Dockstore" scheme="http://yoursite.com/tags/Dockstore/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
